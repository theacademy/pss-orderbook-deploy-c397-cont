#attempt at deleting existing images - should do ten at a time?? and only for team03
#based on jenkins pipeline file ../utils/pipeline_clean_ecr
#...except that im pretty sure that pipeline just deletes 80 images at a time from the whole class 

name: delete-images
on: 
  workflow_dispatch: 
    inputs: 
      delete-number:
        required: false 
        type: string
        description: number of images to delete (this isn't actually implemented yet)
      team_id:
        required: true
        description: your team's number
        type: choice
        options:
        - team01
        - team02
        - team03
        - team04
        - team05
        - team06


jobs:
  DeleteOldImages:
    runs-on: [self-hosted, eks-sre-infra, linux] 
    env:
      ECR_REPOSITORY: "production-support-course"
      ECR_RR: "108174090253.dkr.ecr.us-east-1.amazonaws.com/production-support-course"
      COHORT: 'c397'
      TEAM: ${{ inputs.team_id }}
      #semantic-release-num: ${{ env.semantic-release-num }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
    
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install AWS CLI v2
        shell: bash
        run:  |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
              unzip -q /tmp/awscliv2.zip -d /tmp
              rm /tmp/awscliv2.zip
              sudo /tmp/aws/install --update
              rm -rf /tmp/aws/

      - name: run_delete
        shell: bash
        run: |
          rawImages=$(aws ecr list-images --repository-name "$ecr_rep")

          # Safely extract imageTags
          imageTags=$(echo "$rawImages" | grep imageTag || true)

          # Handle if no image tags are found
          if [ -z "$imageTags" ]; then
              echo "No images found in repository."
              exit 0
          fi

          # Process tags with awk and sed, and concatenate $c_val and $t_val
          filteredTags=$(echo "$imageTags" | awk -F: '{gsub(" ", "\n", $2); print $2}' | sed 's/\"//g')

          # Concatenate $c_val and $t_val and filter
          allImages=$(echo "$filteredTags" | grep "${c_val}${t_val}" || true)

          if [ -z "$allImages" ]; then
              echo "No images matching ${c_val}${t_val} found."
              exit 0
          fi

          # Main deletion loop
          while [ -n "$allImages" ]
          do
              images=""
              
              # Process the tags safely with head
              for tagName in $(echo "$allImages" | head -n 80)
              do
                  images="imageTag=$tagName $images"
              done

              # Make sure images is not empty before trying to delete
              if [ -n "$images" ]; then
                  if aws ecr batch-delete-image --repository-name "${ecr_rep}" --image-ids $images | grep "not found"; then
                      exit 0
                  fi
              fi
              
              images=""
              sleep 10

              # Fetch images again for the next loop iteration
              rawImages=$(aws ecr list-images --repository-name "$ecr_rep")
              imageTags=$(echo "$rawImages" | grep imageTag || true)
              filteredTags=$(echo "$imageTags" | awk -F: '{gsub(" ", "\n", $2); print $2}' | sed 's/\"//g')
              allImages=$(echo "$filteredTags" | grep "${c_val}${t_val}" || true)

              # Break the loop if no more images match
              if [ -z "$allImages" ]; then
                  echo "No more images to delete."
                  break
              fi
          done        
        env: 
          ecr_rep: ${{ env.ECR_REPOSITORY }} 
          c_val: ${{ env.COHORT }} 
          t_val: ${{ env.TEAM }}
          
